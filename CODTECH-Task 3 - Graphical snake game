#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

const int WIDTH = 800;
const int HEIGHT = 600;
const int BLOCK_SIZE = 20;

struct SnakeSegment {
    int x, y;
    SnakeSegment(int x, int y) : x(x), y(y) {}
};

class SnakeGame {
private:
    sf::RenderWindow window;
    sf::Font font;
    sf::Text scoreText;
    sf::SoundBuffer eatBuffer, gameOverBuffer;
    sf::Sound eatSound, gameOverSound;

    std::vector<SnakeSegment> snake;
    SnakeSegment food;
    int dx = 1, dy = 0;
    int score = 0;
    float speed = 0.1f;
    bool gameOver = false;

public:
    SnakeGame() : window(sf::VideoMode(WIDTH, HEIGHT), "Snake Game"),
                  food(rand() % (WIDTH / BLOCK_SIZE), rand() % (HEIGHT / BLOCK_SIZE)) {
        // Seed random generator
        srand(static_cast<unsigned>(time(0)));

        // Load font
        font.loadFromFile("arial.ttf");
        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(sf::Color::White);

        // Load sound effects
        eatBuffer.loadFromFile("eat.wav");
        eatSound.setBuffer(eatBuffer);
        gameOverBuffer.loadFromFile("gameover.wav");
        gameOverSound.setBuffer(gameOverBuffer);

        // Initialize snake
        snake.emplace_back(WIDTH / (2 * BLOCK_SIZE), HEIGHT / (2 * BLOCK_SIZE));
    }

    void run() {
        sf::Clock clock;
        float timer = 0.0f;

        while (window.isOpen()) {
            float time = clock.restart().asSeconds();
            timer += time;

            handleEvents();

            if (!gameOver && timer > speed) {
                timer = 0;
                update();
            }

            render();
        }
    }

private:
    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) && dy == 0) {
            dx = 0; dy = -1;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) && dy == 0) {
            dx = 0; dy = 1;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && dx == 0) {
            dx = -1; dy = 0;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && dx == 0) {
            dx = 1; dy = 0;
        }
    }

    void update() {
        // Move snake
        for (int i = snake.size() - 1; i > 0; --i) {
            snake[i] = snake[i - 1];
        }
        snake[0].x += dx;
        snake[0].y += dy;

        // Check collision with walls
        if (snake[0].x < 0 || snake[0].x >= WIDTH / BLOCK_SIZE || 
            snake[0].y < 0 || snake[0].y >= HEIGHT / BLOCK_SIZE) {
            gameOverSound.play();
            gameOver = true;
        }

        // Check collision with itself
        for (size_t i = 1; i < snake.size(); ++i) {
            if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
                gameOverSound.play();
                gameOver = true;
            }
        }

        // Check collision with food
        if (snake[0].x == food.x && snake[0].y == food.y) {
            eatSound.play();
            score += 10;
            snake.push_back(SnakeSegment(0, 0));
            food.x = rand() % (WIDTH / BLOCK_SIZE);
            food.y = rand() % (HEIGHT / BLOCK_SIZE);
            speed *= 0.95f; // Increase speed
        }
    }

    void render() {
        window.clear();

        // Draw snake
        for (auto &segment : snake) {
            sf::RectangleShape block(sf::Vector2f(BLOCK_SIZE - 1, BLOCK_SIZE - 1));
            block.setFillColor(sf::Color::Green);
            block.setPosition(segment.x * BLOCK_SIZE, segment.y * BLOCK_SIZE);
            window.draw(block);
        }

        // Draw food
        sf::RectangleShape foodBlock(sf::Vector2f(BLOCK_SIZE - 1, BLOCK_SIZE - 1));
        foodBlock.setFillColor(sf::Color::Red);
        foodBlock.setPosition(food.x * BLOCK_SIZE, food.y * BLOCK_SIZE);
        window.draw(foodBlock);

        // Draw score
        scoreText.setString("Score: " + std::to_string(score));
        window.draw(scoreText);

        // Display game over message
        if (gameOver) {
            sf::Text gameOverText;
            gameOverText.setFont(font);
            gameOverText.setCharacterSize(50);
            gameOverText.setFillColor(sf::Color::Red);
            gameOverText.setString("Game Over!");
            gameOverText.setPosition(WIDTH / 4, HEIGHT / 3);
            window.draw(gameOverText);
        }

        window.display();
    }
};

int main() {
    SnakeGame game;
    game.run();
    return 0;
}
